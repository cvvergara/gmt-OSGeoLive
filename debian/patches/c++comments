Index: git/src/grdfft.c
===================================================================
--- git.orig/src/grdfft.c	2013-11-25 15:57:08.000000000 +0100
+++ git/src/grdfft.c	2013-11-25 16:59:54.000000000 +0100
@@ -1083,7 +1083,7 @@
 	sprintf (format, "%s\t%s\t%s\n", gmtdefs.d_format, gmtdefs.d_format, gmtdefs.d_format);
 	powfactor = 4.0 / pow ((double)ndatac, 2.0);
 	for (k = 0; k < nk; k++) {
-		//eps_pow = 1.0/sqrt((double)nused[k]/(double)nk);
+		/* eps_pow = 1.0/sqrt((double)nused[k]/(double)nk);*/
 		eps_pow = 1.0/sqrt((double)nused[k]);
 		freq = (k + 1) * delta_k;
 		if (give_wavelength) freq = 1.0/freq;
Index: git/src/grdimage.c
===================================================================
--- git.orig/src/grdimage.c	2013-11-25 15:57:08.000000000 +0100
+++ git/src/grdimage.c	2013-11-25 17:00:34.000000000 +0100
@@ -601,15 +601,15 @@
 		struct GRD_HEADER tmp_header;
 		for (i = 0; i < n_grids; i++) {
 			map[i] = tmp1[i];
-			//r_head[i].nx = g_head[i].nx;		r_head[i].ny = g_head[i].ny;
-			//r_head[i].x_inc = g_head[i].x_inc;	r_head[i].y_inc = g_head[i].y_inc;
+			/*r_head[i].nx = g_head[i].nx;		r_head[i].ny = g_head[i].ny;
+			  r_head[i].x_inc = g_head[i].x_inc;	r_head[i].y_inc = g_head[i].y_inc;*/
 			memcpy ((void *)&tmp_header, (void *)&g_head[i], sizeof (struct GRD_HEADER));
 			r_head[i] = g_head[i];
 			GMT_set_proj_limits (&r_head[i], &tmp_header, need_to_project);
 		}
 		if (Ctrl->I.active) {
-			//j_head.nx = i_head.nx;		j_head.ny = i_head.ny;
-			//j_head.x_inc = i_head.x_inc;	j_head.y_inc = i_head.y_inc;
+			/*j_head.nx = i_head.nx;		j_head.ny = i_head.ny;
+			  j_head.x_inc = i_head.x_inc;	j_head.y_inc = i_head.y_inc;*/
 			intensity = tmp2;
 			memcpy ((void *)&tmp_header, (void *)&i_head, sizeof (struct GRD_HEADER));
 			j_head = i_head;
Index: git/src/project.c
===================================================================
--- git.orig/src/project.c	2013-11-25 15:57:08.000000000 +0100
+++ git/src/project.c	2013-11-25 17:01:17.000000000 +0100
@@ -818,7 +818,7 @@
 	double	s[3];  /* s points to the south pole  */
 	double	x[3];  /* tmp vector  */
 	double cp;
-	// double sin_lat_to_pole;
+	/* double sin_lat_to_pole;*/
 
 	s[0] = s[1] = 0.0;
 	s[2] = -1.0;
@@ -835,8 +835,8 @@
 	cp = GMT_dot3v (p, c);
 	if (!generate) memcpy ((void *)c, (void *)x, 3*sizeof(double));
 	if (!c_given) GMT_cart_to_geo(clat, clon, c, TRUE);	/* return the possibly adjusted center  */
-	//sin_lat_to_pole = d_sqrt (1.0 - cp * cp);
-	//return (sin_lat_to_pole);
+	/*sin_lat_to_pole = d_sqrt (1.0 - cp * cp);*/
+	/*return (sin_lat_to_pole);*/
 }
 
 #if 0
Index: git/src/psmask.c
===================================================================
--- git.orig/src/psmask.c	2013-11-25 15:57:08.000000000 +0100
+++ git/src/psmask.c	2013-11-25 17:01:29.000000000 +0100
@@ -701,7 +701,7 @@
 		for (j = j0; go_on && j < h->ny; j++) {
 			ij = GMT_IJ (j, i0, h->nx);
 			for (i = i0; go_on && i < h->nx-1; i++, ij++) {
-				// edge_word = (GMT_LONG)(ij / 32 + info->offset);
+				/* edge_word = (GMT_LONG)(ij / 32 + info->offset);*/
 				edge_word = (GMT_LONG)(ij / 32);
 				edge_bit = (GMT_LONG)(ij % 32);
 				if (!(edge[edge_word] & info->bit[edge_bit]) && ((grd[ij]+grd[ij+1]) == 1)) { /* Start tracing contour */
